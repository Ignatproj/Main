#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <io.h>
using namespace std;

struct Tovari
{
    char name[100];
    int Kolvo;
    double Cena;
};

struct TNode {
    int l;
    int r;
    TNode* a;
};

struct stack {
    TNode* top = nullptr;

    void push(int lt, int rt) {
        TNode* spt = new TNode;
        spt->l = lt;
        spt->r = rt;
        spt->a = top;
        top = spt;
    }

    void pop(int& lt, int& rt) {
        TNode* spt = top;
        lt = spt->l;
        rt = spt->r;
        top = spt->a;
        delete spt;
    }
};

void quickSort(Tovari arr[], int size) {
    int left, right;
    stack stack;
    stack.push(0, size - 1);

    while (stack.top) {
        stack.pop(left, right);

        if (left >= right) {
            continue;
        }

        int middle = left + (right - left) / 2;
        double pivot = arr[middle].Cena;
        int i = left, j = right;

        while (i <= j) {
            while (arr[i].Cena < pivot) i++;
            while (arr[j].Cena > pivot) j--;

            if (i <= j) {
                Tovari temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
                j--;
            }
        }

        if (left < j) stack.push(left, j);
        if (i < right) stack.push(i, right);
    }
}

const int maxSize = 5;

void writeToFile(Tovari records[], int size, const char* filename) {
    FILE* file;
    if (fopen_s(&file, filename, "wb") != 0 || !file) {
        cout << "Error opening file" << endl;
        return;
    }
    fwrite(records, sizeof(Tovari), size, file);
    fclose(file);
}

int readFromFile(Tovari records[], const char* filename) {
    FILE* file;
    if (fopen_s(&file, filename, "rb") != 0 || !file) {
        cout << "Error opening file" << endl;
        return 0;
    }
    int count = 0;
    while (count < maxSize && fread(&records[count], sizeof(Tovari), 1, file)) {
        count++;
    }
    fclose(file);
    return count;
}

void updateRecord(const char* filename, const char* name, const Tovari& newRecord) {
    FILE* file;
    if (fopen_s(&file, filename, "rb+") != 0 && !file) {
        cout << "Error open file" << endl;
        return;
    }
    Tovari temp;
        while (fread(&temp, sizeof(Tovari), 1, file)) {
            if (strcmp(temp.name, name)==0) {
                fseek(file, -static_cast<long>(sizeof(Tovari)), SEEK_CUR);
                fwrite(&newRecord, sizeof(Tovari), 1, file);
                break;
            }
        }
        fclose(file);
}


void deleteRecord(const char* filename, const char* name) {
    FILE* file;
    if (fopen_s(&file, filename, "rb+") != 0 && !file) {
        cout << "FIle error" << endl;
        return;
    }

    Tovari temp;
    long deletePos = 0;

    while (fread(&temp, sizeof(Tovari), 1, file)) {
        if (strcmp(temp.name, name) == 0) {
            deletePos = ftell(file) - sizeof(Tovari);
            break;
        }
    }
    if (deletePos == 0) {
        cout << "Notfound" << endl;
        return;
    }

    Tovari next;
    while (fread(&next, sizeof(Tovari), 1, file)) {
        fseek(file, deletePos, SEEK_SET);
        fwrite(&next, sizeof(Tovari), 1, file);
        deletePos = ftell(file);
        fseek(file, deletePos, SEEK_SET);
    }
        
    _chsize_s(_fileno(file), deletePos);
    fclose(file);
    cout << "Good delete" << endl;
}

void addRecord(const char* filename, const Tovari& newRecord) {
    FILE* file;
    if (fopen_s(&file, filename, "ab") != 0 || !file) {
        cout << "Error opening file" << endl;
        return;
    }
    fwrite(&newRecord, sizeof(Tovari), 1, file);
    fclose(file);
}

int main() {
    const char* filename = "tovari.bin";

    Tovari item1 = { "Chocolate", 2, 20 };
    Tovari item2 = { "Milk", 1, 15 };
    Tovari item3 = { "Bread", 1, 10 };

    cout << "Adding records..." << endl;

    addRecord(filename, item1);
    addRecord(filename, item2);
    addRecord(filename, item3);

    Tovari records[maxSize];
    int size = readFromFile(records, filename);
    cout << "File contents:" << endl;
    for (int i = 0; i < size; i++) {
        printf("%s - %d units, Price: %.2f USD\n", records[i].name, records[i].Kolvo, records[i].Cena);
    }
    cout << endl;
    cout << "Updating price of Chocolate..." << endl;

    Tovari newItem = { "Chocolate", 3, 18 };
    updateRecord(filename, "Chocolate", newItem);

    size = readFromFile(records, filename);
    cout << "After update:" << endl;
    for (int i = 0; i < size; i++) {
        printf("%s - %d units, Price: %.2f USD\n", records[i].name, records[i].Kolvo, records[i].Cena);
    }
    cout << endl;
     cout << "Deleting Bread" << endl;
    deleteRecord(filename, "Bread");

    size = readFromFile(records, filename);
    cout << "After deletion:" << endl;
    for (int i = 0; i < size; i++) {
        printf("%s - %d units, Price: %.2f USD\n", records[i].name, records[i].Kolvo, records[i].Cena);
    }

   

    return 0;
}
