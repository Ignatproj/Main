#include <iostream>
using namespace std;

struct Node {
	int data;
	Node* next;
	Node* prev;
};

Node* createNode(char data) {
	return new Node{ data,nullptr,nullptr };
}

void append(Node*& head, char data) {
	Node* newNode = createNode(data);
	if (!head) {
		head = newNode;
		return;
	}
	Node* temp = head;
	while (temp->next) {
		temp = temp->next;
	}
	temp->next = newNode;
	newNode->prev = temp;
}

void moveArithmeticSymbols(Node*& source, Node*& dest) {
	Node* temp = source;
	while (temp) {
		Node* next = temp->next;
		if (ispunct(temp->data)) {
			if (temp->prev) temp->prev->next = temp->next;
			if (temp->next) temp->next->prev = temp->prev;
			if (temp == source) source = temp->next;

			temp->prev = temp->next = nullptr;
			append(dest, temp->data);
			delete temp;
		}
		temp = next;
	}
}

void printlist(Node*& head) {
	Node* temp = head;
	while (temp) {
		cout << static_cast<char>(temp->data) << " ";
		temp = temp->next;
	}
	cout << endl;
}
void freelist(Node*& head) {
	while (head) {
		Node* temp = head;
		head = head->next;
		delete temp;
	}
}


int main()
{
	Node* head = nullptr;
	Node* arithmeticList = nullptr;
	string input = "a+b*c-d/e";
	for (char ch : input) {
		append(head, ch);
	}
	cout << "Base: ";
	printlist(head);
	moveArithmeticSymbols(head, arithmeticList);
	cout << "Lat: ";
	printlist(head);
	cout << "Sumbols: ";
	printlist(arithmeticList);

	freelist(head);
	freelist(arithmeticList);



	return 0;
}
